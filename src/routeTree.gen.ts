/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedSettingsIndexImport } from './routes/_authed/settings/index'
import { Route as AuthedSettingsPrivacyImport } from './routes/_authed/settings/privacy'
import { Route as AuthedSettingsAccountImport } from './routes/_authed/settings/account'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedSettingsIndexRoute = AuthedSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsPrivacyRoute = AuthedSettingsPrivacyImport.update({
  id: '/settings/privacy',
  path: '/settings/privacy',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsAccountRoute = AuthedSettingsAccountImport.update({
  id: '/settings/account',
  path: '/settings/account',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/_authed/settings/account': {
      id: '/_authed/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AuthedSettingsAccountImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/privacy': {
      id: '/_authed/settings/privacy'
      path: '/settings/privacy'
      fullPath: '/settings/privacy'
      preLoaderRoute: typeof AuthedSettingsPrivacyImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/': {
      id: '/_authed/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedSettingsAccountRoute: typeof AuthedSettingsAccountRoute
  AuthedSettingsPrivacyRoute: typeof AuthedSettingsPrivacyRoute
  AuthedSettingsIndexRoute: typeof AuthedSettingsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedSettingsAccountRoute: AuthedSettingsAccountRoute,
  AuthedSettingsPrivacyRoute: AuthedSettingsPrivacyRoute,
  AuthedSettingsIndexRoute: AuthedSettingsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/logout': typeof LogoutRoute
  '/settings/account': typeof AuthedSettingsAccountRoute
  '/settings/privacy': typeof AuthedSettingsPrivacyRoute
  '/settings': typeof AuthedSettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/logout': typeof LogoutRoute
  '/settings/account': typeof AuthedSettingsAccountRoute
  '/settings/privacy': typeof AuthedSettingsPrivacyRoute
  '/settings': typeof AuthedSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/logout': typeof LogoutRoute
  '/_authed/settings/account': typeof AuthedSettingsAccountRoute
  '/_authed/settings/privacy': typeof AuthedSettingsPrivacyRoute
  '/_authed/settings/': typeof AuthedSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/logout'
    | '/settings/account'
    | '/settings/privacy'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/logout'
    | '/settings/account'
    | '/settings/privacy'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/logout'
    | '/_authed/settings/account'
    | '/_authed/settings/privacy'
    | '/_authed/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LogoutRoute: typeof LogoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LogoutRoute: LogoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/settings/account",
        "/_authed/settings/privacy",
        "/_authed/settings/"
      ]
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/_authed/settings/account": {
      "filePath": "_authed/settings/account.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/privacy": {
      "filePath": "_authed/settings/privacy.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/": {
      "filePath": "_authed/settings/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
